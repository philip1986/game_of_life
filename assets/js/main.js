// Generated by CoffeeScript 1.4.0

/*
#   Init
*/


(function() {
  var mainApp;

  mainApp = angular.module('main', []);

  mainApp.directive("loaded", function() {
    return function(scope, element, attrs) {
      return element.bind("load", function() {
        return scope.$apply(attrs.loaded);
      });
    };
  });

  /*
  #   Controllers
  */


  /* Playground
  */


  mainApp.controller('gameCtrl', function($scope, $http, $interval) {
    var graph, graphDataset, graphOptions, _benchmark, _init, _resetStats, _setImageUrl, _startInterval;
    $scope.stats = {};
    $scope.intervalId = null;
    $scope.imgSize = {};
    graph = new links.Graph(document.getElementById('benchmark'));
    graphDataset = [];
    graphOptions = {
      width: '100%',
      height: "400px",
      moveable: false,
      zoomable: false,
      vStart: 0,
      vEnd: 400,
      start: 0,
      end: 4000
    };
    _resetStats = function() {
      return $scope.stats = {
        genCount: 0,
        prevGenCount: 0,
        gps: 0,
        avgGps: 0,
        runtime: 0
      };
    };
    $scope.settings = {
      w: 280,
      h: 140,
      generations: 100,
      imageType: 'svg',
      concurrency: 1,
      benchmark: false,
      life: 5
    };
    _setImageUrl = function() {
      return $scope.imgageUrl = "/api/" + ($scope.stats.genCount++);
    };
    _init = function() {
      var copyOfSettings, ratio;
      $interval.cancel($scope.intervalId);
      $scope.intervalId = null;
      $scope.load = false;
      ratio = $scope.settings.w / document.getElementById('container').offsetWidth * 1.1;
      $scope.imgSize.w = $scope.settings.w * (1 / ratio);
      $scope.imgSize.h = $scope.settings.h * (1 / ratio);
      $scope.state = 'pause';
      $scope.imgageUrl = "/api/new";
      copyOfSettings = JSON.parse(JSON.stringify($scope.settings));
      copyOfSettings.w = Number(copyOfSettings.w);
      copyOfSettings.h = Number(copyOfSettings.h);
      copyOfSettings.generations = Number(copyOfSettings.generations);
      copyOfSettings.life = 12 - Number(copyOfSettings.life);
      copyOfSettings.concurrency = Number(copyOfSettings.concurrency);
      return $http.post("/api/set", copyOfSettings).then(function() {
        if (!$scope.settings.benchmark) {
          _resetStats();
          return _setImageUrl();
        } else {
          return graph.draw(graphDataset, graphOptions);
        }
      });
    };
    _benchmark = function() {
      return $http.get('/api/0').success(function(data) {
        var c, d, pluralThread, _i, _len, _ref;
        $scope.load = false;
        c = 0;
        _ref = data.gphms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          d['date'] = c++ * 100;
        }
        pluralThread = $scope.settings.concurrency === 1 ? '' : 's';
        graphDataset.push({
          label: "" + $scope.settings.w + " x " + $scope.settings.h + " - " + $scope.settings.concurrency + " Thread" + pluralThread + " - " + $scope.settings.generations + " Gen.",
          data: data.gphms
        });
        return graph.draw(graphDataset, graphOptions);
      });
    };
    _startInterval = function() {
      return $scope.intervalId = $interval((function() {
        var s;
        s = $scope.stats;
        s.gps = s.genCount - s.prevGenCount;
        s.runtime++;
        s.avgGps = Math.round(s.genCount / s.runtime * 100) / 100;
        return s.prevGenCount = s.genCount;
      }), 1000);
    };
    $scope.apply = function() {
      return _init();
    };
    $scope.next = function() {
      return _setImageUrl();
    };
    $scope.pause = function() {
      $interval.cancel($scope.intervalId);
      $scope.state = 'pause';
      return $scope.load = false;
    };
    $scope.stop = function() {
      $scope.load = false;
      $scope.state = 'pause';
      _init();
      graphDataset = [];
      return graph.draw(graphDataset, graphOptions);
    };
    $scope.play = function() {
      $scope.load = true;
      if ($scope.settings.benchmark) {
        return _benchmark();
      } else {
        $scope.state = 'play';
        _startInterval();
        return _setImageUrl();
      }
    };
    $scope.genLoaded = function() {
      if ($scope.state === 'play') {
        return _setImageUrl();
      }
    };
    _init();
    return $scope.$watch('settings', _init, true);
  });

}).call(this);
